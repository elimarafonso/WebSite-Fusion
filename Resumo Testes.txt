--> Deleta a test.py da aplicação


--> NOVO DIRETÓRIO DENTRO DA APLICAÇÃO QUE VAI SER TESTADA, CHAMADO:
	> "tests"
		> __init__.py
		> (cada modulo/aplicação dentro do projeto deve ter um um arquivo.py )
'		> (SEMPRE DEVE COMEÇAR COM "test_nome.py")
		> test_models.py
		> test_views.py
		> test_forms.py

--> biblioteca para testes 
	=> "pip install model_mommy":
	
(slide explicando => https://pt.slideshare.net/bernardofontes/melhorando-testes-no-django-com-o-model-mommy-21860913)
	(API para criar instancias de models de maneira rapida baseada em valores aleatorios)

	=> "pip install coverage":

	(O Coverage.py detecta as linhas de código que não são executadas no seu programa. Ao utilizá-lo na execução da suite de testes do seu projeto, ele informa a cobertura de testes do seu código. Se você está desenvolvendo um projeto Django, você vai querer usar o django-coverage.)


	=> "pip freeze > requirements.txt" 


--> cria arquivo na RAIZ DO PROJETO
	=> ".coveragerc"
	=> dentro do arquivo: 
[run]
source = .

omit = 
	*/__init__.py
	*/settings.py
	*/manage.py
	*/wsgi.py
	*/apps.py
	*/urls.py
	*/admin.py
	*/migrations/*
	*/tests/*


(essa config faz testar somente o projeto e omite  os arquivos */ )



--> executando o coverage
	=>"coverage run manage.py test"

-->vendo o relatorio do coverage
	=>"coverage report"

--> adiciona no .gitignore:
	=> "htmlcov/*"

--> comando que gera um relatorio em html:
	=>"coverage html"

--> comando para subir um server python !!PRIMEIRO ENTRE NA PASTA htmlcov com o comando cd htmlcov e dps roda esse comando!!
	=>python -m http.server
(serve para usar como documentação, pq mostra tudo o que tem que ser testado)




******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
--> TESTANDO "models.py"

-->dentro da pasada do projeto, (volte com o comando "cd .." )
 


--> no diretorio 'tests'

	-> test_models.py

--> import uuid
--> from django.test import TestCase
--> from model_mommy import mommy

--> from core.models import get_file_path



--> cria a classe: 'GetFilePathTestCase(TestCase)'

--> cria o metodo: 'def setUp(self):
			self.filename = f'{uuid.uuid4()}.png'

--> cria o metodo: test_get_file_path(self):
			arquivo = get_file_path(None, 'teste.png')
			self.assertTrue(len(arquivo), len(self.filename))

















































