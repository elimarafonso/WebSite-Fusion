--> Deleta a test.py da aplicação


--> NOVO DIRETÓRIO DENTRO DA APLICAÇÃO QUE VAI SER TESTADA, CHAMADO:
	> "tests"
		> __init__.py
		> (cada modulo/aplicação dentro do projeto deve ter um um arquivo.py )
'		> (SEMPRE DEVE COMEÇAR COM "test_nome.py")
		> test_models.py
		> test_views.py
		> test_forms.py

--> biblioteca para testes 
	=> "pip install model_mommy":
	
(slide explicando => https://pt.slideshare.net/bernardofontes/melhorando-testes-no-django-com-o-model-mommy-21860913)
	(API para criar instancias de models de maneira rapida baseada em valores aleatorios)

	=> "pip install coverage":

	(O Coverage.py detecta as linhas de código que não são executadas no seu programa. Ao utilizá-lo na execução da suite de testes do seu projeto, ele informa a cobertura de testes do seu código. Se você está desenvolvendo um projeto Django, você vai querer usar o django-coverage.)


	=> "pip freeze > requirements.txt" 


--> cria arquivo na RAIZ DO PROJETO
	=> ".coveragerc"
	=> dentro do arquivo: 
[run]
source = .

omit = 
	*/__init__.py
	*/settings.py
	*/manage.py
	*/wsgi.py
	*/apps.py
	*/urls.py
	*/admin.py
	*/migrations/*
	*/tests/*


(essa config faz testar somente o projeto e omite  os arquivos */ )



--> executando o coverage
	=>"coverage run manage.py test"

-->vendo o relatorio do coverage
	=>"coverage report"

--> adiciona no .gitignore:
	=> "htmlcov/*"

--> comando que gera um relatorio em html:
	=>"coverage html"

--> comando para subir um server python !!PRIMEIRO ENTRE NA PASTA htmlcov com o comando cd htmlcov e dps roda esse comando!!
	=>python -m http.server
(serve para usar como documentação, pq mostra tudo o que tem que ser testado)




******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
--> TESTANDO "models.py"

-->dentro da pasada do projeto, (volte com o comando "cd .." )
--> sempre que for mostrar o teste no html é preciso deletar o diretório e fazer todo o processo a seguir

--> deleta o diretorio (ele sobrescreve, talvez n precise deletar): 
	->"rm htmlcov/"

--> roda o teste do coverage
	-> 'coverage run manage.py test'

-->gera o html dos testes:
	->'coverage html'

--> entra do diretorio htmlcov
	-> cd htmlcov

-->DENTRO DA PASTA 'htmlcov/' inicia um servidor python para abrir o relatorio html
	->'python -m http.server'






--> no diretorio 'tests'

	-> test_models.py

--> import uuid
--> from django.test import TestCase
--> from model_mommy import mommy

--> from core.models import get_file_path


TESTANDO O METODO 'get_file_path' de models onde ele renomeia o arquivo para que não ocorra duplicidade

--> cria a classe: 'GetFilePathTestCase(TestCase)'

--> cria o metodo: 'def setUp(self):
			self.filename = f'{uuid.uuid4()}.png'

--> cria o metodo: test_get_file_path(self):
			arquivo = get_file_path(None, 'teste.png')
			self.assertTrue(len(arquivo), len(self.filename))




--->TESTANDO os metodos '__str__' de Cargo, Funcionario, Serviço, Avaliacoes e Features

=>exemplo:
class AcaliacoesTestCase(TestCase):
    def setUp(self):
        self.avaliacoes = mommy.make('Avaliacoes') *o mommy gera uma instancia da classe Avaliações*

    def test_str(self):
        self.assertEquals(str(self.avaliacoes), self.avaliacoes.nome) *coverage compara o __str__ de avaliaçoes obs: OLHE O __str__ do Avaliaçoes*

=> para testar volta ao inicio desta sessão




**************************************************************
**************************************************************

---> testando form.py FORMULÁRIOS:

--> cria variáves com os mesmos nomes e recebendo os valores dos campos do formulário

exemplo:
 
 def setUp(self):
        self.name = 'Elimar Afonso de Souza'
        self.email = 'elimar_afonso@hotmail.com'


--> cria uma lista contendo 'referencia do campo' : variáveis criadas a cima (OBS: A REFERENCIA PRECISA TER O MESMO NOME DO CAMPO)

exemplo
        #lista
        self.data = {
            'name': self.name,
            'email': self.email,

--> cria uma OBJETO da Classe do *formulário a ser testado* recebendo a lista

exemplo :
 self.form = ContactForm(data=self.data)


-- > cria um metodo com o 'test_+nomedometodo'

===> cria a duas instancias do formulário e compara se o retorno de ambos é igual (não necessáriamente esta mesma lógica):

exemplo:


    def test_send_email(self):
        form1 = ContactForm(data=self.data) # esta instacia é com a Classe a ser testada, passando os dados já criados
        form1.is_valid()
        resposta1 = form1.send_email()

        form2 = self.form # esta instancia é a que foi criada no setUp, que também foi passado os dados já criados
        form2.is_valid()
        resposta2 = form2.send_email()

        self.assertEquals(resposta1, resposta2) # comparando o retorno das duas instancias, neste caso ambas n retornam nada.




*****************************************
testando views

utilize sempre o python shell quando quiser saber o que esta retornando 



--> comandos
'python manage.py shell'

--> importa as classes necessarias

'from django.test import Client'

'from django.urls import reverse_lazy'

-->cria as instancias necessarias

        data = {
            'name': self.name,
            'email': self.email,
            'subject': self.subject,
            'message': self.message
        }

--> cria uma instancia de Client()
cliente = Client() 

--> cria um request
 request = self.cliente.post(reverse_lazy('index'), data=self.data)

--> veja o que tem dentro do request

request.status_code


---> brinque a vontade
*****************************************

	

===> import necessários

from django.test import TestCase
from django.test import Client **Cria como metodos http**

from django.urls import reverse_lazy **chama o nome das views pelo nome passado na urls.py **


==> veja o exemplo na classe test_views.py

--> como import Client(), após criar um objeto desta classe é possível fazer várias requisiçoes http; exemplos:

   def setUp(self):
        # lista com os campos do formulário
        
	self.dados = {
            'name': 'Elimar Afonso',
            'email': 'elimar_afonso@hotmail.com',
            'subject': 'Vaga de emprego',
            'message': 'esta é uma mensagem válida'
        }

self.cliente = Client()


self.client.post(reverse_lazy('index'), data = self.dados )


# está fazendo um POST para a página 'index', com as informações de dados(name, email, subject, message)

com a instancia deste objeto é possivel ter acesso a várias informaçoes como por exemplo o codigo http status Code.

--> outros:
requestExemplo = self.client.post(reverse_lazy('index'), data = self.dados )

requestExemplo.get,
requestExemplo.getvalue,
requestExemplo.items',
requestExemplo.json',
requestExemplo.template_name',










